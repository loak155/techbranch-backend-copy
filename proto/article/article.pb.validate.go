// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: article.proto

package article

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArticleMultiError, or nil if none found.
func (m *Article) ValidateAll() error {
	return m.validate(true)
}

func (m *Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := ArticleValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = ArticleValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ArticleValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BookmarkCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArticleMultiError(errors)
	}

	return nil
}

// ArticleMultiError is an error wrapping multiple validation errors returned
// by Article.ValidateAll() if the designated constraints aren't met.
type ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleMultiError) AllErrors() []error { return m }

// ArticleValidationError is the validation error returned by Article.Validate
// if the designated constraints aren't met.
type ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleValidationError) ErrorName() string { return "ArticleValidationError" }

// Error satisfies the builtin error interface
func (e ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleValidationError{}

// Validate checks the field values on CreateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleRequestMultiError, or nil if none found.
func (m *CreateArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArticleRequestValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArticleRequestMultiError(errors)
	}

	return nil
}

// CreateArticleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleRequestMultiError) AllErrors() []error { return m }

// CreateArticleRequestValidationError is the validation error returned by
// CreateArticleRequest.Validate if the designated constraints aren't met.
type CreateArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleRequestValidationError) ErrorName() string {
	return "CreateArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleRequestValidationError{}

// Validate checks the field values on CreateArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleResponseMultiError, or nil if none found.
func (m *CreateArticleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArticleResponseValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArticleResponseValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArticleResponseValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArticleResponseMultiError(errors)
	}

	return nil
}

// CreateArticleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateArticleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleResponseMultiError) AllErrors() []error { return m }

// CreateArticleResponseValidationError is the validation error returned by
// CreateArticleResponse.Validate if the designated constraints aren't met.
type CreateArticleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleResponseValidationError) ErrorName() string {
	return "CreateArticleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleResponseValidationError{}

// Validate checks the field values on GetArticleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleRequestMultiError, or nil if none found.
func (m *GetArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleRequestMultiError(errors)
	}

	return nil
}

// GetArticleRequestMultiError is an error wrapping multiple validation errors
// returned by GetArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleRequestMultiError) AllErrors() []error { return m }

// GetArticleRequestValidationError is the validation error returned by
// GetArticleRequest.Validate if the designated constraints aren't met.
type GetArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleRequestValidationError) ErrorName() string {
	return "GetArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleRequestValidationError{}

// Validate checks the field values on GetArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleResponseMultiError, or nil if none found.
func (m *GetArticleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArticleResponseValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArticleResponseValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArticleResponseValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArticleResponseMultiError(errors)
	}

	return nil
}

// GetArticleResponseMultiError is an error wrapping multiple validation errors
// returned by GetArticleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetArticleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleResponseMultiError) AllErrors() []error { return m }

// GetArticleResponseValidationError is the validation error returned by
// GetArticleResponse.Validate if the designated constraints aren't met.
type GetArticleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleResponseValidationError) ErrorName() string {
	return "GetArticleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleResponseValidationError{}

// Validate checks the field values on ListArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArticlesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArticlesRequestMultiError, or nil if none found.
func (m *ListArticlesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArticlesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListArticlesRequestMultiError(errors)
	}

	return nil
}

// ListArticlesRequestMultiError is an error wrapping multiple validation
// errors returned by ListArticlesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListArticlesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArticlesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArticlesRequestMultiError) AllErrors() []error { return m }

// ListArticlesRequestValidationError is the validation error returned by
// ListArticlesRequest.Validate if the designated constraints aren't met.
type ListArticlesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArticlesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArticlesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArticlesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArticlesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArticlesRequestValidationError) ErrorName() string {
	return "ListArticlesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArticlesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArticlesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArticlesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArticlesRequestValidationError{}

// Validate checks the field values on ListArticlesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArticlesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArticlesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArticlesResponseMultiError, or nil if none found.
func (m *ListArticlesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArticlesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArticlesResponseValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArticlesResponseValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArticlesResponseValidationError{
					field:  fmt.Sprintf("Articles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListArticlesResponseMultiError(errors)
	}

	return nil
}

// ListArticlesResponseMultiError is an error wrapping multiple validation
// errors returned by ListArticlesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListArticlesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArticlesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArticlesResponseMultiError) AllErrors() []error { return m }

// ListArticlesResponseValidationError is the validation error returned by
// ListArticlesResponse.Validate if the designated constraints aren't met.
type ListArticlesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArticlesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArticlesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArticlesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArticlesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArticlesResponseValidationError) ErrorName() string {
	return "ListArticlesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArticlesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArticlesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArticlesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArticlesResponseValidationError{}

// Validate checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleRequestMultiError, or nil if none found.
func (m *UpdateArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArticleRequestValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateArticleRequestMultiError(errors)
	}

	return nil
}

// UpdateArticleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleRequestMultiError) AllErrors() []error { return m }

// UpdateArticleRequestValidationError is the validation error returned by
// UpdateArticleRequest.Validate if the designated constraints aren't met.
type UpdateArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleRequestValidationError) ErrorName() string {
	return "UpdateArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleRequestValidationError{}

// Validate checks the field values on UpdateArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleResponseMultiError, or nil if none found.
func (m *UpdateArticleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateArticleResponseMultiError(errors)
	}

	return nil
}

// UpdateArticleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateArticleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateArticleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleResponseMultiError) AllErrors() []error { return m }

// UpdateArticleResponseValidationError is the validation error returned by
// UpdateArticleResponse.Validate if the designated constraints aren't met.
type UpdateArticleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleResponseValidationError) ErrorName() string {
	return "UpdateArticleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleResponseValidationError{}

// Validate checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleRequestMultiError, or nil if none found.
func (m *DeleteArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteArticleRequestMultiError(errors)
	}

	return nil
}

// DeleteArticleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleRequestMultiError) AllErrors() []error { return m }

// DeleteArticleRequestValidationError is the validation error returned by
// DeleteArticleRequest.Validate if the designated constraints aren't met.
type DeleteArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleRequestValidationError) ErrorName() string {
	return "DeleteArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleRequestValidationError{}

// Validate checks the field values on DeleteArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleResponseMultiError, or nil if none found.
func (m *DeleteArticleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteArticleResponseMultiError(errors)
	}

	return nil
}

// DeleteArticleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteArticleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteArticleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleResponseMultiError) AllErrors() []error { return m }

// DeleteArticleResponseValidationError is the validation error returned by
// DeleteArticleResponse.Validate if the designated constraints aren't met.
type DeleteArticleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleResponseValidationError) ErrorName() string {
	return "DeleteArticleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleResponseValidationError{}

// Validate checks the field values on IncrementBookmarksCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrementBookmarksCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrementBookmarksCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IncrementBookmarksCountRequestMultiError, or nil if none found.
func (m *IncrementBookmarksCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrementBookmarksCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IncrementBookmarksCountRequestMultiError(errors)
	}

	return nil
}

// IncrementBookmarksCountRequestMultiError is an error wrapping multiple
// validation errors returned by IncrementBookmarksCountRequest.ValidateAll()
// if the designated constraints aren't met.
type IncrementBookmarksCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrementBookmarksCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrementBookmarksCountRequestMultiError) AllErrors() []error { return m }

// IncrementBookmarksCountRequestValidationError is the validation error
// returned by IncrementBookmarksCountRequest.Validate if the designated
// constraints aren't met.
type IncrementBookmarksCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementBookmarksCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementBookmarksCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementBookmarksCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementBookmarksCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementBookmarksCountRequestValidationError) ErrorName() string {
	return "IncrementBookmarksCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncrementBookmarksCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementBookmarksCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementBookmarksCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementBookmarksCountRequestValidationError{}

// Validate checks the field values on IncrementBookmarksCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrementBookmarksCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrementBookmarksCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IncrementBookmarksCountResponseMultiError, or nil if none found.
func (m *IncrementBookmarksCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrementBookmarksCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return IncrementBookmarksCountResponseMultiError(errors)
	}

	return nil
}

// IncrementBookmarksCountResponseMultiError is an error wrapping multiple
// validation errors returned by IncrementBookmarksCountResponse.ValidateAll()
// if the designated constraints aren't met.
type IncrementBookmarksCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrementBookmarksCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrementBookmarksCountResponseMultiError) AllErrors() []error { return m }

// IncrementBookmarksCountResponseValidationError is the validation error
// returned by IncrementBookmarksCountResponse.Validate if the designated
// constraints aren't met.
type IncrementBookmarksCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementBookmarksCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementBookmarksCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementBookmarksCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementBookmarksCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementBookmarksCountResponseValidationError) ErrorName() string {
	return "IncrementBookmarksCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncrementBookmarksCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementBookmarksCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementBookmarksCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementBookmarksCountResponseValidationError{}

// Validate checks the field values on DecrementBookmarksCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecrementBookmarksCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecrementBookmarksCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DecrementBookmarksCountRequestMultiError, or nil if none found.
func (m *DecrementBookmarksCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecrementBookmarksCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DecrementBookmarksCountRequestMultiError(errors)
	}

	return nil
}

// DecrementBookmarksCountRequestMultiError is an error wrapping multiple
// validation errors returned by DecrementBookmarksCountRequest.ValidateAll()
// if the designated constraints aren't met.
type DecrementBookmarksCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecrementBookmarksCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecrementBookmarksCountRequestMultiError) AllErrors() []error { return m }

// DecrementBookmarksCountRequestValidationError is the validation error
// returned by DecrementBookmarksCountRequest.Validate if the designated
// constraints aren't met.
type DecrementBookmarksCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecrementBookmarksCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecrementBookmarksCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecrementBookmarksCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecrementBookmarksCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecrementBookmarksCountRequestValidationError) ErrorName() string {
	return "DecrementBookmarksCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecrementBookmarksCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecrementBookmarksCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecrementBookmarksCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecrementBookmarksCountRequestValidationError{}

// Validate checks the field values on DecrementBookmarksCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecrementBookmarksCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecrementBookmarksCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DecrementBookmarksCountResponseMultiError, or nil if none found.
func (m *DecrementBookmarksCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DecrementBookmarksCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DecrementBookmarksCountResponseMultiError(errors)
	}

	return nil
}

// DecrementBookmarksCountResponseMultiError is an error wrapping multiple
// validation errors returned by DecrementBookmarksCountResponse.ValidateAll()
// if the designated constraints aren't met.
type DecrementBookmarksCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecrementBookmarksCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecrementBookmarksCountResponseMultiError) AllErrors() []error { return m }

// DecrementBookmarksCountResponseValidationError is the validation error
// returned by DecrementBookmarksCountResponse.Validate if the designated
// constraints aren't met.
type DecrementBookmarksCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecrementBookmarksCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecrementBookmarksCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecrementBookmarksCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecrementBookmarksCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecrementBookmarksCountResponseValidationError) ErrorName() string {
	return "DecrementBookmarksCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DecrementBookmarksCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecrementBookmarksCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecrementBookmarksCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecrementBookmarksCountResponseValidationError{}
