// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleService_CreateArticle_FullMethodName                     = "/loak155.techbranch.proto.article.ArticleService/CreateArticle"
	ArticleService_GetArticle_FullMethodName                        = "/loak155.techbranch.proto.article.ArticleService/GetArticle"
	ArticleService_ListArticles_FullMethodName                      = "/loak155.techbranch.proto.article.ArticleService/ListArticles"
	ArticleService_UpdateArticle_FullMethodName                     = "/loak155.techbranch.proto.article.ArticleService/UpdateArticle"
	ArticleService_DeleteArticle_FullMethodName                     = "/loak155.techbranch.proto.article.ArticleService/DeleteArticle"
	ArticleService_IncrementBookmarksCount_FullMethodName           = "/loak155.techbranch.proto.article.ArticleService/IncrementBookmarksCount"
	ArticleService_IncrementBookmarksCountCompensate_FullMethodName = "/loak155.techbranch.proto.article.ArticleService/IncrementBookmarksCountCompensate"
	ArticleService_DecrementBookmarksCount_FullMethodName           = "/loak155.techbranch.proto.article.ArticleService/DecrementBookmarksCount"
	ArticleService_DecrementBookmarksCountCompensate_FullMethodName = "/loak155.techbranch.proto.article.ArticleService/DecrementBookmarksCountCompensate"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error)
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	IncrementBookmarksCount(ctx context.Context, in *IncrementBookmarksCountRequest, opts ...grpc.CallOption) (*IncrementBookmarksCountResponse, error)
	IncrementBookmarksCountCompensate(ctx context.Context, in *IncrementBookmarksCountRequest, opts ...grpc.CallOption) (*IncrementBookmarksCountResponse, error)
	DecrementBookmarksCount(ctx context.Context, in *DecrementBookmarksCountRequest, opts ...grpc.CallOption) (*DecrementBookmarksCountResponse, error)
	DecrementBookmarksCountCompensate(ctx context.Context, in *DecrementBookmarksCountRequest, opts ...grpc.CallOption) (*DecrementBookmarksCountResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error) {
	out := new(CreateArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	out := new(GetArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	out := new(ListArticlesResponse)
	err := c.cc.Invoke(ctx, ArticleService_ListArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error) {
	out := new(UpdateArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	out := new(DeleteArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) IncrementBookmarksCount(ctx context.Context, in *IncrementBookmarksCountRequest, opts ...grpc.CallOption) (*IncrementBookmarksCountResponse, error) {
	out := new(IncrementBookmarksCountResponse)
	err := c.cc.Invoke(ctx, ArticleService_IncrementBookmarksCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) IncrementBookmarksCountCompensate(ctx context.Context, in *IncrementBookmarksCountRequest, opts ...grpc.CallOption) (*IncrementBookmarksCountResponse, error) {
	out := new(IncrementBookmarksCountResponse)
	err := c.cc.Invoke(ctx, ArticleService_IncrementBookmarksCountCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DecrementBookmarksCount(ctx context.Context, in *DecrementBookmarksCountRequest, opts ...grpc.CallOption) (*DecrementBookmarksCountResponse, error) {
	out := new(DecrementBookmarksCountResponse)
	err := c.cc.Invoke(ctx, ArticleService_DecrementBookmarksCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DecrementBookmarksCountCompensate(ctx context.Context, in *DecrementBookmarksCountRequest, opts ...grpc.CallOption) (*DecrementBookmarksCountResponse, error) {
	out := new(DecrementBookmarksCountResponse)
	err := c.cc.Invoke(ctx, ArticleService_DecrementBookmarksCountCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error)
	ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error)
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	IncrementBookmarksCount(context.Context, *IncrementBookmarksCountRequest) (*IncrementBookmarksCountResponse, error)
	IncrementBookmarksCountCompensate(context.Context, *IncrementBookmarksCountRequest) (*IncrementBookmarksCountResponse, error)
	DecrementBookmarksCount(context.Context, *DecrementBookmarksCountRequest) (*DecrementBookmarksCountResponse, error)
	DecrementBookmarksCountCompensate(context.Context, *DecrementBookmarksCountRequest) (*DecrementBookmarksCountResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleServiceServer) GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServiceServer) ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedArticleServiceServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServiceServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleServiceServer) IncrementBookmarksCount(context.Context, *IncrementBookmarksCountRequest) (*IncrementBookmarksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementBookmarksCount not implemented")
}
func (UnimplementedArticleServiceServer) IncrementBookmarksCountCompensate(context.Context, *IncrementBookmarksCountRequest) (*IncrementBookmarksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementBookmarksCountCompensate not implemented")
}
func (UnimplementedArticleServiceServer) DecrementBookmarksCount(context.Context, *DecrementBookmarksCountRequest) (*DecrementBookmarksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementBookmarksCount not implemented")
}
func (UnimplementedArticleServiceServer) DecrementBookmarksCountCompensate(context.Context, *DecrementBookmarksCountRequest) (*DecrementBookmarksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementBookmarksCountCompensate not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_IncrementBookmarksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementBookmarksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).IncrementBookmarksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_IncrementBookmarksCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).IncrementBookmarksCount(ctx, req.(*IncrementBookmarksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_IncrementBookmarksCountCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementBookmarksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).IncrementBookmarksCountCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_IncrementBookmarksCountCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).IncrementBookmarksCountCompensate(ctx, req.(*IncrementBookmarksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DecrementBookmarksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementBookmarksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DecrementBookmarksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_DecrementBookmarksCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DecrementBookmarksCount(ctx, req.(*DecrementBookmarksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DecrementBookmarksCountCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementBookmarksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DecrementBookmarksCountCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_DecrementBookmarksCountCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DecrementBookmarksCountCompensate(ctx, req.(*DecrementBookmarksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loak155.techbranch.proto.article.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleService_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticleService_GetArticle_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _ArticleService_ListArticles_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleService_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleService_DeleteArticle_Handler,
		},
		{
			MethodName: "IncrementBookmarksCount",
			Handler:    _ArticleService_IncrementBookmarksCount_Handler,
		},
		{
			MethodName: "IncrementBookmarksCountCompensate",
			Handler:    _ArticleService_IncrementBookmarksCountCompensate_Handler,
		},
		{
			MethodName: "DecrementBookmarksCount",
			Handler:    _ArticleService_DecrementBookmarksCount_Handler,
		},
		{
			MethodName: "DecrementBookmarksCountCompensate",
			Handler:    _ArticleService_DecrementBookmarksCountCompensate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
