// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: bookmark.proto

package bookmark

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ArticleId int32                  `protobuf:"varint,3,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Bookmark) Reset() {
	*x = Bookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookmark) ProtoMessage() {}

func (x *Bookmark) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookmark.ProtoReflect.Descriptor instead.
func (*Bookmark) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{0}
}

func (x *Bookmark) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookmark) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Bookmark) GetArticleId() int32 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *Bookmark) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Bookmark) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark *Bookmark `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateBookmarkRequest) Reset() {
	*x = CreateBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookmarkRequest) ProtoMessage() {}

func (x *CreateBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookmarkRequest.ProtoReflect.Descriptor instead.
func (*CreateBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBookmarkRequest) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type CreateBookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark *Bookmark `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *CreateBookmarkResponse) Reset() {
	*x = CreateBookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookmarkResponse) ProtoMessage() {}

func (x *CreateBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookmarkResponse.ProtoReflect.Descriptor instead.
func (*CreateBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBookmarkResponse) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type GetBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBookmarkRequest) Reset() {
	*x = GetBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookmarkRequest) ProtoMessage() {}

func (x *GetBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookmarkRequest.ProtoReflect.Descriptor instead.
func (*GetBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{3}
}

func (x *GetBookmarkRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark *Bookmark `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *GetBookmarkResponse) Reset() {
	*x = GetBookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookmarkResponse) ProtoMessage() {}

func (x *GetBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookmarkResponse.ProtoReflect.Descriptor instead.
func (*GetBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{4}
}

func (x *GetBookmarkResponse) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type ListBookmarksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBookmarksRequest) Reset() {
	*x = ListBookmarksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksRequest) ProtoMessage() {}

func (x *ListBookmarksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksRequest.ProtoReflect.Descriptor instead.
func (*ListBookmarksRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{5}
}

type ListBookmarksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmarks []*Bookmark `protobuf:"bytes,1,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListBookmarksResponse) Reset() {
	*x = ListBookmarksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksResponse) ProtoMessage() {}

func (x *ListBookmarksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksResponse.ProtoReflect.Descriptor instead.
func (*ListBookmarksResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{6}
}

func (x *ListBookmarksResponse) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListBookmarksByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListBookmarksByUserIDRequest) Reset() {
	*x = ListBookmarksByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksByUserIDRequest) ProtoMessage() {}

func (x *ListBookmarksByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksByUserIDRequest.ProtoReflect.Descriptor instead.
func (*ListBookmarksByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{7}
}

func (x *ListBookmarksByUserIDRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListBookmarksByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmarks []*Bookmark `protobuf:"bytes,1,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListBookmarksByUserIDResponse) Reset() {
	*x = ListBookmarksByUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksByUserIDResponse) ProtoMessage() {}

func (x *ListBookmarksByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksByUserIDResponse.ProtoReflect.Descriptor instead.
func (*ListBookmarksByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{8}
}

func (x *ListBookmarksByUserIDResponse) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type ListBookmarksByArticleIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int32 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *ListBookmarksByArticleIDRequest) Reset() {
	*x = ListBookmarksByArticleIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksByArticleIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksByArticleIDRequest) ProtoMessage() {}

func (x *ListBookmarksByArticleIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksByArticleIDRequest.ProtoReflect.Descriptor instead.
func (*ListBookmarksByArticleIDRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{9}
}

func (x *ListBookmarksByArticleIDRequest) GetArticleId() int32 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type ListBookmarksByArticleIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmarks []*Bookmark `protobuf:"bytes,1,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *ListBookmarksByArticleIDResponse) Reset() {
	*x = ListBookmarksByArticleIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarksByArticleIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarksByArticleIDResponse) ProtoMessage() {}

func (x *ListBookmarksByArticleIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarksByArticleIDResponse.ProtoReflect.Descriptor instead.
func (*ListBookmarksByArticleIDResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{10}
}

func (x *ListBookmarksByArticleIDResponse) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type DeleteBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark *Bookmark `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *DeleteBookmarkRequest) Reset() {
	*x = DeleteBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkRequest) ProtoMessage() {}

func (x *DeleteBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteBookmarkRequest) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type DeleteBookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteBookmarkResponse) Reset() {
	*x = DeleteBookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkResponse) ProtoMessage() {}

func (x *DeleteBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkResponse.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteBookmarkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteBookmarkByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteBookmarkByUserIDRequest) Reset() {
	*x = DeleteBookmarkByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkByUserIDRequest) ProtoMessage() {}

func (x *DeleteBookmarkByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkByUserIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteBookmarkByUserIDRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteBookmarkByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteBookmarkByUserIDResponse) Reset() {
	*x = DeleteBookmarkByUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkByUserIDResponse) ProtoMessage() {}

func (x *DeleteBookmarkByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkByUserIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteBookmarkByUserIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteBookmarkByArticleIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId uint64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *DeleteBookmarkByArticleIDRequest) Reset() {
	*x = DeleteBookmarkByArticleIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkByArticleIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkByArticleIDRequest) ProtoMessage() {}

func (x *DeleteBookmarkByArticleIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkByArticleIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkByArticleIDRequest) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteBookmarkByArticleIDRequest) GetArticleId() uint64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type DeleteBookmarkByArticleIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteBookmarkByArticleIDResponse) Reset() {
	*x = DeleteBookmarkByArticleIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmark_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmarkByArticleIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkByArticleIDResponse) ProtoMessage() {}

func (x *DeleteBookmarkByArticleIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bookmark_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkByArticleIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkByArticleIDResponse) Descriptor() ([]byte, []int) {
	return file_bookmark_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBookmarkByArticleIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_bookmark_proto protoreflect.FileDescriptor

var file_bookmark_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x60, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x61,
	0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x61, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x62, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x37, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x40, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x60, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35,
	0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x32,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x38, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x9f, 0x0d, 0x0a, 0x0f, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x38, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x6f,
	0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x35, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35,
	0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x37, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31,
	0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3f, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x42, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6c, 0x6f, 0x61, 0x6b,
	0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x38, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x6f,
	0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x40, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6c, 0x6f,
	0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e,
	0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa6, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x43,
	0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6c, 0x6f, 0x61, 0x6b, 0x31, 0x35, 0x35,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x61, 0x6b, 0x31,
	0x35, 0x35, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2d, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bookmark_proto_rawDescOnce sync.Once
	file_bookmark_proto_rawDescData = file_bookmark_proto_rawDesc
)

func file_bookmark_proto_rawDescGZIP() []byte {
	file_bookmark_proto_rawDescOnce.Do(func() {
		file_bookmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_bookmark_proto_rawDescData)
	})
	return file_bookmark_proto_rawDescData
}

var file_bookmark_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_bookmark_proto_goTypes = []interface{}{
	(*Bookmark)(nil),                          // 0: loak155.techbranch.proto.bookmark.Bookmark
	(*CreateBookmarkRequest)(nil),             // 1: loak155.techbranch.proto.bookmark.CreateBookmarkRequest
	(*CreateBookmarkResponse)(nil),            // 2: loak155.techbranch.proto.bookmark.CreateBookmarkResponse
	(*GetBookmarkRequest)(nil),                // 3: loak155.techbranch.proto.bookmark.GetBookmarkRequest
	(*GetBookmarkResponse)(nil),               // 4: loak155.techbranch.proto.bookmark.GetBookmarkResponse
	(*ListBookmarksRequest)(nil),              // 5: loak155.techbranch.proto.bookmark.ListBookmarksRequest
	(*ListBookmarksResponse)(nil),             // 6: loak155.techbranch.proto.bookmark.ListBookmarksResponse
	(*ListBookmarksByUserIDRequest)(nil),      // 7: loak155.techbranch.proto.bookmark.ListBookmarksByUserIDRequest
	(*ListBookmarksByUserIDResponse)(nil),     // 8: loak155.techbranch.proto.bookmark.ListBookmarksByUserIDResponse
	(*ListBookmarksByArticleIDRequest)(nil),   // 9: loak155.techbranch.proto.bookmark.ListBookmarksByArticleIDRequest
	(*ListBookmarksByArticleIDResponse)(nil),  // 10: loak155.techbranch.proto.bookmark.ListBookmarksByArticleIDResponse
	(*DeleteBookmarkRequest)(nil),             // 11: loak155.techbranch.proto.bookmark.DeleteBookmarkRequest
	(*DeleteBookmarkResponse)(nil),            // 12: loak155.techbranch.proto.bookmark.DeleteBookmarkResponse
	(*DeleteBookmarkByUserIDRequest)(nil),     // 13: loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDRequest
	(*DeleteBookmarkByUserIDResponse)(nil),    // 14: loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDResponse
	(*DeleteBookmarkByArticleIDRequest)(nil),  // 15: loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDRequest
	(*DeleteBookmarkByArticleIDResponse)(nil), // 16: loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDResponse
	(*timestamppb.Timestamp)(nil),             // 17: google.protobuf.Timestamp
}
var file_bookmark_proto_depIdxs = []int32{
	17, // 0: loak155.techbranch.proto.bookmark.Bookmark.created_at:type_name -> google.protobuf.Timestamp
	17, // 1: loak155.techbranch.proto.bookmark.Bookmark.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: loak155.techbranch.proto.bookmark.CreateBookmarkRequest.bookmark:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 3: loak155.techbranch.proto.bookmark.CreateBookmarkResponse.bookmark:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 4: loak155.techbranch.proto.bookmark.GetBookmarkResponse.bookmark:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 5: loak155.techbranch.proto.bookmark.ListBookmarksResponse.bookmarks:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 6: loak155.techbranch.proto.bookmark.ListBookmarksByUserIDResponse.bookmarks:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 7: loak155.techbranch.proto.bookmark.ListBookmarksByArticleIDResponse.bookmarks:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	0,  // 8: loak155.techbranch.proto.bookmark.DeleteBookmarkRequest.bookmark:type_name -> loak155.techbranch.proto.bookmark.Bookmark
	1,  // 9: loak155.techbranch.proto.bookmark.BookmarkService.CreateBookmark:input_type -> loak155.techbranch.proto.bookmark.CreateBookmarkRequest
	1,  // 10: loak155.techbranch.proto.bookmark.BookmarkService.CreateBookmarkCompensate:input_type -> loak155.techbranch.proto.bookmark.CreateBookmarkRequest
	3,  // 11: loak155.techbranch.proto.bookmark.BookmarkService.GetBookmark:input_type -> loak155.techbranch.proto.bookmark.GetBookmarkRequest
	5,  // 12: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarks:input_type -> loak155.techbranch.proto.bookmark.ListBookmarksRequest
	7,  // 13: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarksByUserID:input_type -> loak155.techbranch.proto.bookmark.ListBookmarksByUserIDRequest
	9,  // 14: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarksByArticleID:input_type -> loak155.techbranch.proto.bookmark.ListBookmarksByArticleIDRequest
	11, // 15: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmark:input_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkRequest
	13, // 16: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByUserID:input_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDRequest
	13, // 17: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByUserIDCompensate:input_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDRequest
	15, // 18: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByArticleID:input_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDRequest
	15, // 19: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByArticleIDCompensate:input_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDRequest
	2,  // 20: loak155.techbranch.proto.bookmark.BookmarkService.CreateBookmark:output_type -> loak155.techbranch.proto.bookmark.CreateBookmarkResponse
	2,  // 21: loak155.techbranch.proto.bookmark.BookmarkService.CreateBookmarkCompensate:output_type -> loak155.techbranch.proto.bookmark.CreateBookmarkResponse
	4,  // 22: loak155.techbranch.proto.bookmark.BookmarkService.GetBookmark:output_type -> loak155.techbranch.proto.bookmark.GetBookmarkResponse
	6,  // 23: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarks:output_type -> loak155.techbranch.proto.bookmark.ListBookmarksResponse
	8,  // 24: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarksByUserID:output_type -> loak155.techbranch.proto.bookmark.ListBookmarksByUserIDResponse
	10, // 25: loak155.techbranch.proto.bookmark.BookmarkService.ListBookmarksByArticleID:output_type -> loak155.techbranch.proto.bookmark.ListBookmarksByArticleIDResponse
	12, // 26: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmark:output_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkResponse
	14, // 27: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByUserID:output_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDResponse
	14, // 28: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByUserIDCompensate:output_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByUserIDResponse
	16, // 29: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByArticleID:output_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDResponse
	16, // 30: loak155.techbranch.proto.bookmark.BookmarkService.DeleteBookmarkByArticleIDCompensate:output_type -> loak155.techbranch.proto.bookmark.DeleteBookmarkByArticleIDResponse
	20, // [20:31] is the sub-list for method output_type
	9,  // [9:20] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_bookmark_proto_init() }
func file_bookmark_proto_init() {
	if File_bookmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bookmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksByUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksByArticleIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarksByArticleIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkByUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkByArticleIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmark_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmarkByArticleIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bookmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bookmark_proto_goTypes,
		DependencyIndexes: file_bookmark_proto_depIdxs,
		MessageInfos:      file_bookmark_proto_msgTypes,
	}.Build()
	File_bookmark_proto = out.File
	file_bookmark_proto_rawDesc = nil
	file_bookmark_proto_goTypes = nil
	file_bookmark_proto_depIdxs = nil
}
