// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bookmark.proto

package bookmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookmarkService_CreateBookmark_FullMethodName                      = "/loak155.techbranch.proto.bookmark.BookmarkService/CreateBookmark"
	BookmarkService_CreateBookmarkCompensate_FullMethodName            = "/loak155.techbranch.proto.bookmark.BookmarkService/CreateBookmarkCompensate"
	BookmarkService_GetBookmark_FullMethodName                         = "/loak155.techbranch.proto.bookmark.BookmarkService/GetBookmark"
	BookmarkService_ListBookmarks_FullMethodName                       = "/loak155.techbranch.proto.bookmark.BookmarkService/ListBookmarks"
	BookmarkService_ListBookmarksByUserID_FullMethodName               = "/loak155.techbranch.proto.bookmark.BookmarkService/ListBookmarksByUserID"
	BookmarkService_ListBookmarksByArticleID_FullMethodName            = "/loak155.techbranch.proto.bookmark.BookmarkService/ListBookmarksByArticleID"
	BookmarkService_DeleteBookmark_FullMethodName                      = "/loak155.techbranch.proto.bookmark.BookmarkService/DeleteBookmark"
	BookmarkService_DeleteBookmarkByUserID_FullMethodName              = "/loak155.techbranch.proto.bookmark.BookmarkService/DeleteBookmarkByUserID"
	BookmarkService_DeleteBookmarkByUserIDCompensate_FullMethodName    = "/loak155.techbranch.proto.bookmark.BookmarkService/DeleteBookmarkByUserIDCompensate"
	BookmarkService_DeleteBookmarkByArticleID_FullMethodName           = "/loak155.techbranch.proto.bookmark.BookmarkService/DeleteBookmarkByArticleID"
	BookmarkService_DeleteBookmarkByArticleIDCompensate_FullMethodName = "/loak155.techbranch.proto.bookmark.BookmarkService/DeleteBookmarkByArticleIDCompensate"
)

// BookmarkServiceClient is the client API for BookmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarkServiceClient interface {
	CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error)
	CreateBookmarkCompensate(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error)
	GetBookmark(ctx context.Context, in *GetBookmarkRequest, opts ...grpc.CallOption) (*GetBookmarkResponse, error)
	ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error)
	ListBookmarksByUserID(ctx context.Context, in *ListBookmarksByUserIDRequest, opts ...grpc.CallOption) (*ListBookmarksByUserIDResponse, error)
	ListBookmarksByArticleID(ctx context.Context, in *ListBookmarksByArticleIDRequest, opts ...grpc.CallOption) (*ListBookmarksByArticleIDResponse, error)
	DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error)
	DeleteBookmarkByUserID(ctx context.Context, in *DeleteBookmarkByUserIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByUserIDResponse, error)
	DeleteBookmarkByUserIDCompensate(ctx context.Context, in *DeleteBookmarkByUserIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByUserIDResponse, error)
	DeleteBookmarkByArticleID(ctx context.Context, in *DeleteBookmarkByArticleIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByArticleIDResponse, error)
	DeleteBookmarkByArticleIDCompensate(ctx context.Context, in *DeleteBookmarkByArticleIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByArticleIDResponse, error)
}

type bookmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkServiceClient(cc grpc.ClientConnInterface) BookmarkServiceClient {
	return &bookmarkServiceClient{cc}
}

func (c *bookmarkServiceClient) CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error) {
	out := new(CreateBookmarkResponse)
	err := c.cc.Invoke(ctx, BookmarkService_CreateBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) CreateBookmarkCompensate(ctx context.Context, in *CreateBookmarkRequest, opts ...grpc.CallOption) (*CreateBookmarkResponse, error) {
	out := new(CreateBookmarkResponse)
	err := c.cc.Invoke(ctx, BookmarkService_CreateBookmarkCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) GetBookmark(ctx context.Context, in *GetBookmarkRequest, opts ...grpc.CallOption) (*GetBookmarkResponse, error) {
	out := new(GetBookmarkResponse)
	err := c.cc.Invoke(ctx, BookmarkService_GetBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) ListBookmarks(ctx context.Context, in *ListBookmarksRequest, opts ...grpc.CallOption) (*ListBookmarksResponse, error) {
	out := new(ListBookmarksResponse)
	err := c.cc.Invoke(ctx, BookmarkService_ListBookmarks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) ListBookmarksByUserID(ctx context.Context, in *ListBookmarksByUserIDRequest, opts ...grpc.CallOption) (*ListBookmarksByUserIDResponse, error) {
	out := new(ListBookmarksByUserIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_ListBookmarksByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) ListBookmarksByArticleID(ctx context.Context, in *ListBookmarksByArticleIDRequest, opts ...grpc.CallOption) (*ListBookmarksByArticleIDResponse, error) {
	out := new(ListBookmarksByArticleIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_ListBookmarksByArticleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error) {
	out := new(DeleteBookmarkResponse)
	err := c.cc.Invoke(ctx, BookmarkService_DeleteBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) DeleteBookmarkByUserID(ctx context.Context, in *DeleteBookmarkByUserIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByUserIDResponse, error) {
	out := new(DeleteBookmarkByUserIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_DeleteBookmarkByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) DeleteBookmarkByUserIDCompensate(ctx context.Context, in *DeleteBookmarkByUserIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByUserIDResponse, error) {
	out := new(DeleteBookmarkByUserIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_DeleteBookmarkByUserIDCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) DeleteBookmarkByArticleID(ctx context.Context, in *DeleteBookmarkByArticleIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByArticleIDResponse, error) {
	out := new(DeleteBookmarkByArticleIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_DeleteBookmarkByArticleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarkServiceClient) DeleteBookmarkByArticleIDCompensate(ctx context.Context, in *DeleteBookmarkByArticleIDRequest, opts ...grpc.CallOption) (*DeleteBookmarkByArticleIDResponse, error) {
	out := new(DeleteBookmarkByArticleIDResponse)
	err := c.cc.Invoke(ctx, BookmarkService_DeleteBookmarkByArticleIDCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkServiceServer is the server API for BookmarkService service.
// All implementations must embed UnimplementedBookmarkServiceServer
// for forward compatibility
type BookmarkServiceServer interface {
	CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error)
	CreateBookmarkCompensate(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error)
	GetBookmark(context.Context, *GetBookmarkRequest) (*GetBookmarkResponse, error)
	ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error)
	ListBookmarksByUserID(context.Context, *ListBookmarksByUserIDRequest) (*ListBookmarksByUserIDResponse, error)
	ListBookmarksByArticleID(context.Context, *ListBookmarksByArticleIDRequest) (*ListBookmarksByArticleIDResponse, error)
	DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error)
	DeleteBookmarkByUserID(context.Context, *DeleteBookmarkByUserIDRequest) (*DeleteBookmarkByUserIDResponse, error)
	DeleteBookmarkByUserIDCompensate(context.Context, *DeleteBookmarkByUserIDRequest) (*DeleteBookmarkByUserIDResponse, error)
	DeleteBookmarkByArticleID(context.Context, *DeleteBookmarkByArticleIDRequest) (*DeleteBookmarkByArticleIDResponse, error)
	DeleteBookmarkByArticleIDCompensate(context.Context, *DeleteBookmarkByArticleIDRequest) (*DeleteBookmarkByArticleIDResponse, error)
	mustEmbedUnimplementedBookmarkServiceServer()
}

// UnimplementedBookmarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarkServiceServer struct {
}

func (UnimplementedBookmarkServiceServer) CreateBookmark(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookmark not implemented")
}
func (UnimplementedBookmarkServiceServer) CreateBookmarkCompensate(context.Context, *CreateBookmarkRequest) (*CreateBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookmarkCompensate not implemented")
}
func (UnimplementedBookmarkServiceServer) GetBookmark(context.Context, *GetBookmarkRequest) (*GetBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmark not implemented")
}
func (UnimplementedBookmarkServiceServer) ListBookmarks(context.Context, *ListBookmarksRequest) (*ListBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarks not implemented")
}
func (UnimplementedBookmarkServiceServer) ListBookmarksByUserID(context.Context, *ListBookmarksByUserIDRequest) (*ListBookmarksByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarksByUserID not implemented")
}
func (UnimplementedBookmarkServiceServer) ListBookmarksByArticleID(context.Context, *ListBookmarksByArticleIDRequest) (*ListBookmarksByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarksByArticleID not implemented")
}
func (UnimplementedBookmarkServiceServer) DeleteBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmark not implemented")
}
func (UnimplementedBookmarkServiceServer) DeleteBookmarkByUserID(context.Context, *DeleteBookmarkByUserIDRequest) (*DeleteBookmarkByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkByUserID not implemented")
}
func (UnimplementedBookmarkServiceServer) DeleteBookmarkByUserIDCompensate(context.Context, *DeleteBookmarkByUserIDRequest) (*DeleteBookmarkByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkByUserIDCompensate not implemented")
}
func (UnimplementedBookmarkServiceServer) DeleteBookmarkByArticleID(context.Context, *DeleteBookmarkByArticleIDRequest) (*DeleteBookmarkByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkByArticleID not implemented")
}
func (UnimplementedBookmarkServiceServer) DeleteBookmarkByArticleIDCompensate(context.Context, *DeleteBookmarkByArticleIDRequest) (*DeleteBookmarkByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkByArticleIDCompensate not implemented")
}
func (UnimplementedBookmarkServiceServer) mustEmbedUnimplementedBookmarkServiceServer() {}

// UnsafeBookmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarkServiceServer will
// result in compilation errors.
type UnsafeBookmarkServiceServer interface {
	mustEmbedUnimplementedBookmarkServiceServer()
}

func RegisterBookmarkServiceServer(s grpc.ServiceRegistrar, srv BookmarkServiceServer) {
	s.RegisterService(&BookmarkService_ServiceDesc, srv)
}

func _BookmarkService_CreateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).CreateBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_CreateBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).CreateBookmark(ctx, req.(*CreateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_CreateBookmarkCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).CreateBookmarkCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_CreateBookmarkCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).CreateBookmarkCompensate(ctx, req.(*CreateBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_GetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).GetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_GetBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).GetBookmark(ctx, req.(*GetBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_ListBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).ListBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_ListBookmarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).ListBookmarks(ctx, req.(*ListBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_ListBookmarksByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).ListBookmarksByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_ListBookmarksByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).ListBookmarksByUserID(ctx, req.(*ListBookmarksByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_ListBookmarksByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookmarksByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).ListBookmarksByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_ListBookmarksByArticleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).ListBookmarksByArticleID(ctx, req.(*ListBookmarksByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_DeleteBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).DeleteBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_DeleteBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).DeleteBookmark(ctx, req.(*DeleteBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_DeleteBookmarkByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).DeleteBookmarkByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_DeleteBookmarkByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).DeleteBookmarkByUserID(ctx, req.(*DeleteBookmarkByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_DeleteBookmarkByUserIDCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).DeleteBookmarkByUserIDCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_DeleteBookmarkByUserIDCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).DeleteBookmarkByUserIDCompensate(ctx, req.(*DeleteBookmarkByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_DeleteBookmarkByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).DeleteBookmarkByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_DeleteBookmarkByArticleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).DeleteBookmarkByArticleID(ctx, req.(*DeleteBookmarkByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarkService_DeleteBookmarkByArticleIDCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).DeleteBookmarkByArticleIDCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookmarkService_DeleteBookmarkByArticleIDCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).DeleteBookmarkByArticleIDCompensate(ctx, req.(*DeleteBookmarkByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookmarkService_ServiceDesc is the grpc.ServiceDesc for BookmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loak155.techbranch.proto.bookmark.BookmarkService",
	HandlerType: (*BookmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookmark",
			Handler:    _BookmarkService_CreateBookmark_Handler,
		},
		{
			MethodName: "CreateBookmarkCompensate",
			Handler:    _BookmarkService_CreateBookmarkCompensate_Handler,
		},
		{
			MethodName: "GetBookmark",
			Handler:    _BookmarkService_GetBookmark_Handler,
		},
		{
			MethodName: "ListBookmarks",
			Handler:    _BookmarkService_ListBookmarks_Handler,
		},
		{
			MethodName: "ListBookmarksByUserID",
			Handler:    _BookmarkService_ListBookmarksByUserID_Handler,
		},
		{
			MethodName: "ListBookmarksByArticleID",
			Handler:    _BookmarkService_ListBookmarksByArticleID_Handler,
		},
		{
			MethodName: "DeleteBookmark",
			Handler:    _BookmarkService_DeleteBookmark_Handler,
		},
		{
			MethodName: "DeleteBookmarkByUserID",
			Handler:    _BookmarkService_DeleteBookmarkByUserID_Handler,
		},
		{
			MethodName: "DeleteBookmarkByUserIDCompensate",
			Handler:    _BookmarkService_DeleteBookmarkByUserIDCompensate_Handler,
		},
		{
			MethodName: "DeleteBookmarkByArticleID",
			Handler:    _BookmarkService_DeleteBookmarkByArticleID_Handler,
		},
		{
			MethodName: "DeleteBookmarkByArticleIDCompensate",
			Handler:    _BookmarkService_DeleteBookmarkByArticleIDCompensate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookmark.proto",
}
