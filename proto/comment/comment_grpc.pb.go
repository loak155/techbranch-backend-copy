// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentService_CreateComment_FullMethodName                      = "/loak155.techbranch.proto.comment.CommentService/CreateComment"
	CommentService_GetComment_FullMethodName                         = "/loak155.techbranch.proto.comment.CommentService/GetComment"
	CommentService_ListCommentsByArticleID_FullMethodName            = "/loak155.techbranch.proto.comment.CommentService/ListCommentsByArticleID"
	CommentService_UpdateComment_FullMethodName                      = "/loak155.techbranch.proto.comment.CommentService/UpdateComment"
	CommentService_DeleteComment_FullMethodName                      = "/loak155.techbranch.proto.comment.CommentService/DeleteComment"
	CommentService_DeleteCommentByUserID_FullMethodName              = "/loak155.techbranch.proto.comment.CommentService/DeleteCommentByUserID"
	CommentService_DeleteCommentByUserIDCompensate_FullMethodName    = "/loak155.techbranch.proto.comment.CommentService/DeleteCommentByUserIDCompensate"
	CommentService_DeleteCommentByArticleID_FullMethodName           = "/loak155.techbranch.proto.comment.CommentService/DeleteCommentByArticleID"
	CommentService_DeleteCommentByArticleIDCompensate_FullMethodName = "/loak155.techbranch.proto.comment.CommentService/DeleteCommentByArticleIDCompensate"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	ListCommentsByArticleID(ctx context.Context, in *ListCommentsByArticleIDRequest, opts ...grpc.CallOption) (*ListCommentsByArticleIDResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	DeleteCommentByUserID(ctx context.Context, in *DeleteCommentByUserIDRequest, opts ...grpc.CallOption) (*DeleteCommentByUserIDResponse, error)
	DeleteCommentByUserIDCompensate(ctx context.Context, in *DeleteCommentByUserIDRequest, opts ...grpc.CallOption) (*DeleteCommentByUserIDResponse, error)
	DeleteCommentByArticleID(ctx context.Context, in *DeleteCommentByArticleIDRequest, opts ...grpc.CallOption) (*DeleteCommentByArticleIDResponse, error)
	DeleteCommentByArticleIDCompensate(ctx context.Context, in *DeleteCommentByArticleIDRequest, opts ...grpc.CallOption) (*DeleteCommentByArticleIDResponse, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_GetComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListCommentsByArticleID(ctx context.Context, in *ListCommentsByArticleIDRequest, opts ...grpc.CallOption) (*ListCommentsByArticleIDResponse, error) {
	out := new(ListCommentsByArticleIDResponse)
	err := c.cc.Invoke(ctx, CommentService_ListCommentsByArticleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentByUserID(ctx context.Context, in *DeleteCommentByUserIDRequest, opts ...grpc.CallOption) (*DeleteCommentByUserIDResponse, error) {
	out := new(DeleteCommentByUserIDResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteCommentByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentByUserIDCompensate(ctx context.Context, in *DeleteCommentByUserIDRequest, opts ...grpc.CallOption) (*DeleteCommentByUserIDResponse, error) {
	out := new(DeleteCommentByUserIDResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteCommentByUserIDCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentByArticleID(ctx context.Context, in *DeleteCommentByArticleIDRequest, opts ...grpc.CallOption) (*DeleteCommentByArticleIDResponse, error) {
	out := new(DeleteCommentByArticleIDResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteCommentByArticleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentByArticleIDCompensate(ctx context.Context, in *DeleteCommentByArticleIDRequest, opts ...grpc.CallOption) (*DeleteCommentByArticleIDResponse, error) {
	out := new(DeleteCommentByArticleIDResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteCommentByArticleIDCompensate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	ListCommentsByArticleID(context.Context, *ListCommentsByArticleIDRequest) (*ListCommentsByArticleIDResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	DeleteCommentByUserID(context.Context, *DeleteCommentByUserIDRequest) (*DeleteCommentByUserIDResponse, error)
	DeleteCommentByUserIDCompensate(context.Context, *DeleteCommentByUserIDRequest) (*DeleteCommentByUserIDResponse, error)
	DeleteCommentByArticleID(context.Context, *DeleteCommentByArticleIDRequest) (*DeleteCommentByArticleIDResponse, error)
	DeleteCommentByArticleIDCompensate(context.Context, *DeleteCommentByArticleIDRequest) (*DeleteCommentByArticleIDResponse, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCommentServiceServer) ListCommentsByArticleID(context.Context, *ListCommentsByArticleIDRequest) (*ListCommentsByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsByArticleID not implemented")
}
func (UnimplementedCommentServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteCommentByUserID(context.Context, *DeleteCommentByUserIDRequest) (*DeleteCommentByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentByUserID not implemented")
}
func (UnimplementedCommentServiceServer) DeleteCommentByUserIDCompensate(context.Context, *DeleteCommentByUserIDRequest) (*DeleteCommentByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentByUserIDCompensate not implemented")
}
func (UnimplementedCommentServiceServer) DeleteCommentByArticleID(context.Context, *DeleteCommentByArticleIDRequest) (*DeleteCommentByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentByArticleID not implemented")
}
func (UnimplementedCommentServiceServer) DeleteCommentByArticleIDCompensate(context.Context, *DeleteCommentByArticleIDRequest) (*DeleteCommentByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentByArticleIDCompensate not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListCommentsByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListCommentsByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_ListCommentsByArticleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListCommentsByArticleID(ctx, req.(*ListCommentsByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteCommentByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentByUserID(ctx, req.(*DeleteCommentByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentByUserIDCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentByUserIDCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteCommentByUserIDCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentByUserIDCompensate(ctx, req.(*DeleteCommentByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteCommentByArticleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentByArticleID(ctx, req.(*DeleteCommentByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentByArticleIDCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentByArticleIDCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteCommentByArticleIDCompensate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentByArticleIDCompensate(ctx, req.(*DeleteCommentByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loak155.techbranch.proto.comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
		{
			MethodName: "ListCommentsByArticleID",
			Handler:    _CommentService_ListCommentsByArticleID_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteCommentByUserID",
			Handler:    _CommentService_DeleteCommentByUserID_Handler,
		},
		{
			MethodName: "DeleteCommentByUserIDCompensate",
			Handler:    _CommentService_DeleteCommentByUserIDCompensate_Handler,
		},
		{
			MethodName: "DeleteCommentByArticleID",
			Handler:    _CommentService_DeleteCommentByArticleID_Handler,
		},
		{
			MethodName: "DeleteCommentByArticleIDCompensate",
			Handler:    _CommentService_DeleteCommentByArticleIDCompensate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
